# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_symbolic_representers.ipynb.

# %% auto 0
__all__ = ['image_to_text', 'ImageRepresenter', 'VideoRepresenter', 'WebSiteRepresenter']

# %% ../nbs/01_symbolic_representers.ipynb 3
import sglang as sgl

# %% ../nbs/01_symbolic_representers.ipynb 4
@sgl.function
def image_to_text(s, image_path, representation_description):
    s += sgl.user(sgl.image(image_path) + representation_description)
    s += sgl.assistant(sgl.gen("answer"))


class ImageRepresenter:
    def __init__(
        self,
        model_path="liuhaotian/llava-v1.5-7b",
        tokenizer_path="llava-hf/llava-1.5-7b-hf",
        representation_description="Please describe this image in great detail",
    ):
        self.runtime = sgl.Runtime(model_path=model_path, tokenizer_path=tokenizer_path)
        sgl.set_default_backend(self.runtime)
        self.representation_description = representation_description

    def convert_to_text(self, images, max_new_tokens=64):
        images = [images] if isinstance(images, str) else images
        states = image_to_text.run_batch(
            [
                {"image_path": image, "representation_description": desc}
                for image, desc in zip(
                    images, [self.representation_description] * len(images)
                )
            ],
            max_new_tokens=max_new_tokens,
        )
        return [s["answer"].lstrip() for s in states]

    def shutdown(self):
        self.runtime.shutdown()

# %% ../nbs/01_symbolic_representers.ipynb 6
class VideoRepresenter:
    pass

# %% ../nbs/01_symbolic_representers.ipynb 7
class WebSiteRepresenter:
    """
    Based on WebArena: https://arxiv.org/pdf/2307.13854.pdf
    """

    pass
